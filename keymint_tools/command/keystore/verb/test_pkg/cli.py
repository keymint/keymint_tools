# Copyright 2014 Open Source Robotics Foundation, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import sys

from keymint_tools.build_type_discovery import get_class_for_build_type

# from keymint_tools.command.keystore.verb.build_pkg import prepare_arguments \
#     as build_pkg_prepare_arguments
from keymint_tools.command.keystore.verb.build_pkg.cli import get_build_type
from keymint_tools.command.keystore.verb.build_pkg.cli import get_context as build_pkg_get_context
from keymint_tools.command.keystore.verb.build_pkg.cli import handle_build_action
from keymint_tools.command.keystore.verb.build_pkg.cli import run as build_pkg_run


def main(opts):
    opts.build_tests = True
    context = build_pkg_get_context(opts)
    context.retest_until_pass = (opts.retest_until_pass > 0)
    rc = build_pkg_run(opts, context)
    if rc:
        return rc

    # Load up build type plugin class
    build_type = get_build_type(opts.path)
    build_type_impl = get_class_for_build_type(build_type)()

    # Run the test command
    pkg_name = context.package_manifest.name
    print("+++ Testing '{0}'".format(pkg_name))
    context.test_iteration = 0
    while True:
        try:
            on_test_ret = build_type_impl.on_test(context)
        except (AttributeError, NotImplementedError):
            print("on_test() is not implemented for build type '%s'" %
                  build_type, file=sys.stderr)
            return
        try:
            handle_build_action(on_test_ret, context)
        except SystemExit as e:
            # Automated systems can use --ignore-return-codes to allow them to react to
            # a failure to *run* a test but not a failure generated by a test that ran as
            # intended. Otherwise, we'll combine the two cases to help users to notice
            # when anything went wrong during a test run.
            # if opts.ignore_return_codes:
            #     return
            # else:
            return e.code
        break
